" Options
" Moving around, searching, patterns
set incsearch
set ignorecase
set smartcase

" Displaying text
set scrolloff=2
set wrap
set lazyredraw
set number
set relativenumber

" Syntax, highlighting, spelling
set background=light
set hlsearch
set colorcolumn=+1,+2,+3,+4

" Multiple windows
set laststatus=2

" Messages, info
set showcmd

" Editing text
set backspace=indent,eol,start
set nojoinspaces
set textwidth=80

" Tabs, indenting
set tabstop=2
set shiftwidth=2
set expandtab

" Folding
set nofoldenable
set foldlevel=1
set foldmethod=indent
set foldnestmax=10

" Encoding
set encoding=utf-8
set fileformat=unix

packadd minpac
call minpac#init()

" Local vimrc
call minpac#add('embear/vim-localvimrc')

" direnv
call minpac#add('direnv/direnv.vim')

" EditorConfig
call minpac#add('sgur/vim-editorconfig')

" Easily search for, substitute, and abbreviate multiple variants of a word
call minpac#add('tpope/vim-abolish')

" Delete other buffers
call minpac#add('jbranchaud/vim-bdubs')

" Lean & mean status/tabline for vim that's light as air
call minpac#add('vim-airline/vim-airline')
call minpac#add('vim-airline/vim-airline-themes')

" Precision colorscheme for the vim text editor
call minpac#add('altercation/vim-colors-solarized')

" Fuzzy file, buffer, mru, tag, etc finder
call minpac#add('kien/ctrlp.vim')

" Asynchronous build and test dispatcher
call minpac#add('tpope/vim-dispatch')

" Helpers for UNIX
call minpac#add('tpope/vim-eunuch')

" A git wrapper so awesome, it should be illegal
call minpac#add('tpope/vim-fugitive')
call minpac#add('tpope/vim-rhubarb')

" A vim plugin that shows a git diff in the gutter and stages/undoes hunks
call minpac#add('airblade/vim-gitgutter')

" Heroku toolbelt and hk wrapper
call minpac#add('tpope/vim-heroku', {'type': 'opt'})

" Markdown support
call minpac#add('tpope/vim-markdown')

" Extended % matching for many languages
call minpac#add('tmhedberg/matchit')

" Automatically create any non-existent directories before writing the buffer
call minpac#add('pbrisbin/vim-mkdir')

" Granular project configuration
call minpac#add('tpope/vim-projectionist')

" Enable repeating supported plugin maps with '.'
call minpac#add('tpope/vim-repeat')

" Replace text with the contents of a register
call minpac#add('vim-scripts/ingo-library')
call minpac#add('vim-scripts/ReplaceWithRegister')
call minpac#add('vim-scripts/ReplaceWithSameIndentRegister')

" Snippets feature
call minpac#add('MarcWeber/vim-addon-mw-utils')
call minpac#add('tomtom/tlib_vim')
call minpac#add('garbas/vim-snipmate')

call minpac#add('honza/vim-snippets')

" Sort a range of text
call minpac#add('christoomey/vim-sort-motion')

" Simplify transition between single-line and multiline code
call minpac#add('AndrewRadev/splitjoin.vim')

" Quoting/parenthesizing made simple
call minpac#add('tpope/vim-surround')

" An extensible & universal comment plugin
call minpac#add('tomtom/tcomment_vim')

" Create your own text objects
call minpac#add('kana/vim-textobj-user')
call minpac#add('kana/vim-textobj-line')                  " al/il
call minpac#add('kana/vim-textobj-indent')                " ai/ii, aI/ iI
call minpac#add('kana/vim-textobj-entire')                " ae/ie

call minpac#add('fvictorio/vim-textobj-backticks')        " a`/i`/ii` backticks
call minpac#add('deathlyfrantic/vim-textobj-blanklines')  " a<Space>/i<Space> blank lines
call minpac#add('kana/vim-textobj-datetime')              " ada/ida date
call minpac#add('kana/vim-textobj-diff')                  " adh/idh diff output
call minpac#add('whatyouhide/vim-textobj-erb')            " aE/iE erb tags
call minpac#add('kana/vim-textobj-fold')                  " az/iz folded lines
call minpac#add('gilligan/textobj-gitgutter')         		" ih changed hunk marked
call minpac#add('rsrchboy/vim-textobj-heredocs')          " aH/iH heredoc
call minpac#add('vimtaku/vim-textobj-keyvalue')           " ak/iv key/value
call minpac#add('kana/vim-textobj-lastpat')               " a//i/ region matched by search pattern
call minpac#add('adriaanzon/vim-textobj-matchit')         " am/im matchit pairs
call minpac#add('sgur/vim-textobj-parameter')             " a,/i, argument
call minpac#add('beloglazov/vim-textobj-quotes')          " aq/iq quoted
call minpac#add('jceb/vim-textobj-uri')                   " au/iu uri
call minpac#add('julian/vim-textobj-variable-segment')    " av/iv snake_case/CamelCase
call minpac#add('whatyouhide/vim-textobj-xmlattr')        " ax/ix xml/html attribute
call minpac#add('tek/vim-textobj-ruby')                   " ac/af/ar/an/ic/if/ir/in

" Seamless navigation between tmux panes and vim splits
call minpac#add('christoomey/vim-tmux-navigator')

" Pairs of handy bracket mappings
call minpac#add('tpope/vim-unimpaired')

" A minimal package manager for Vim 8 and NeoVim
call minpac#add('k-takata/minpac', {'type': 'opt'})

" Languages/Ruby
" Toggle ruby block styles
call minpac#add('vim-scripts/blockle.vim')

" Lightweight support for Ruby's bundler
call minpac#add('tpope/vim-bundler')

" Wisely add "end" in ruby, endfunction/endif/more in vimscript, etc
call minpac#add('tpope/vim-endwise')

" Add i18n translations to your Rails project
call minpac#add('stefanoverna/vim-i18n')

" Ruby on Rails power tools
call minpac#add('tpope/vim-rails')

" It's like vim-rails without the rails
call minpac#add('tpope/vim-rake')

" Rbenv support
call minpac#add('tpope/vim-rbenv')

" Run Rspec specs
call minpac#add('thoughtbot/vim-rspec')

" Ruby configuration files
call minpac#add('vim-ruby/vim-ruby')

" Refactoring tool for Ruby
call minpac#add('ecomba/vim-ruby-refactoring')

" Highlights tomdoc comments
call minpac#add('wellbredgrapefruit/tomdoc.vim')

" Languages/Elixir
call minpac#add('elixir-editors/vim-elixir')
call minpac#add('avdgaag/vim-phoenix')

" Languages/Javascript
call minpac#add('pangloss/vim-javascript')
call minpac#add('jelera/vim-javascript-syntax')
call minpac#add('mxw/vim-jsx')
call minpac#add('isRuslan/vim-es6')

" Node.js support
call minpac#add('moll/vim-node')
call minpac#add('digitaltoad/vim-pug')

" Languages/Haml, Sass, SCSS
call minpac#add('tpope/vim-haml')

" Languages/Slim
call minpac#add('slim-template/vim-slim')

" Languages/Coffeescript
call minpac#add('kchmck/vim-coffee-script', {'type': 'opt'})

" Languages/Elm
call minpac#add('elmcast/elm-vim', {'type': 'opt'})

" Languages/Clojure
call minpac#add('tpope/vim-fireplace', {'type': 'opt'})
call minpac#add('guns/vim-clojure-static', {'type': 'opt'})
call minpac#add('guns/vim-clojure-highlight', {'type': 'opt'})

" Languages/Common Lisp
call minpac#add('jpalardy/vim-slime', {'type': 'opt'})

" Languages/vimL
call minpac#add('tpope/vim-scriptease', {'type': 'opt'})

" Database access to many dbms
call minpac#add('vim-scripts/dbext.vim', {'type': 'opt'})

command! PackUpdate call minpac#update()
command! PackClean call minpac#clean()

function! AirlineInit()
  let g:airline_left_sep = '»'
  let g:airline_right_sep = '«'

  let g:airline_symbols.notexists = ' ∄'

  let g:airline#extensions#branch#format = 1
  let g:airline#extensions#default#layout = [['a', 'b', 'c'], ['x', 'y', 'z']]

  let g:airline_section_a = airline#section#create(['mode', ' ', 'branch'])
  let g:airline_section_b = airline#section#create_left(['hunks'])
  let g:airline_section_c = airline#section#create(['%t%m'])
endfunction

let g:EditorConfig_exclude_patterns =['fugitive://.*']

let g:localvimrc_name = ['.vimrc.local']

let g:solarized_termcolors = 256
colorscheme solarized

let g:elm_setup_keybindings = 0
let g:elm_format_fail_silently = 1

let g:jsx_ext_required = 0

let g:markdown_fenced_languages = [
  \ 'sql',
  \ 'javascript',
  \ 'ruby',
  \ 'sh',
  \ 'yaml',
  \ 'html',
  \ 'vim',
  \ 'json',
  \ 'diff',
  \ 'css',
  \ 'sass',
  \ 'scss'
  \ ]

let g:rspec_command = 'Dispatch rspec {spec}'

let g:ruby_indent_access_modifier_style = 'indent'

let g:slime_target = 'tmux'

if has("autocmd")
  if !exists("g:autocommans_loaded")
    let g:autocommands_loaded = 1

    " autocmd BufWritePost $MYVIMRC source $MYVIMRC

    " jump to the last known position in a file
    autocmd BufReadPost *
      \ if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit'
      \ | exe "normal! g'\""
      \ | endif

    autocmd BufEnter *.es6 setlocal filetype=javascript

    autocmd BufNewFile,BufRead *.pdf.prawn setlocal filetype=ruby

    autocmd BufNewFile,BufRead *.slim setlocal filetype=slim

    autocmd User AirlineAfterInit call AirlineInit()
  endif
endif

" The Silver Searcher
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor\ --vimgrep

  let g:ctrlp_user_command = 'ag %s -l --hidden --nocolor -g ""'
  let g:ctrlp_use_caching = 0
endif

if has('nvim')
  let g:ruby_host_prog = '~/.rbenv/versions/2.5.3/bin/neovim-ruby-host'
endif

" Keyboard mappings
" replace text
nmap <leader>gr "*gr
nmap <leader>gr "*gR

" search highlighting
nnoremap <silent> <leader>h :<C-u>nohlsearch<CR>

" navigation between tmux panes & vim windows
let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <C-h> :TmuxNavigateLeft<CR>
nnoremap <silent> <C-j> :TmuxNavigateDown<CR>
nnoremap <silent> <C-k> :TmuxNavigateUp<CR>
nnoremap <silent> <C-l> :TmuxNavigateRight<CR>
" nnoremap <silent> <C-\> :TmuxNavigatePrevious<CR>

" buffers
map <leader>n :bn<CR>
map <leader>p :bp<CR>
map <leader>d :bd<CR>

nmap <leader>P <Plug>(Prettier)

" switch between the last two files
nnoremap <leader><leader> <C-^>

" unmap arrow keys
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>
inoremap <Up> <nop>
inoremap <Down> <nop>
inoremap <Left> <nop>
inoremap <Right> <nop>

filetype plugin indent on
syntax on

" vim:ft=vim
